name: CI/CD Backend

on:
  push:
    branches:
      - deploy/andos-eextraits.0.0.1
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest  # Utilise un runner Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile  # Assurez-vous que ce chemin est correct
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/andos-eextraits-back:latest
          build-args: |
            CACHE_BUST=${{ github.sha }}

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "Dockerfile,docker-compose.yml,pom.xml,mvnw,.mvn,src"
          target: "/root/andos_eextraits_back"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            TARGET_DIR="/root/andos_eextraits_back"

            if [ ! -d "$TARGET_DIR" ]; then
              echo "Error: Directory $TARGET_DIR does not exist."
              exit 1
            fi
            cd $TARGET_DIR

            echo "Creating .env file in $TARGET_DIR"
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env

            echo "Pulling new Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/andos-eextraits-back:latest

            echo "Running docker-compose up..."
            docker-compose -f docker-compose.yml up -d --force-recreate andos-eextraits-back
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Starting final cleanup of source files..."
            find . -depth 1 ! -name "docker-compose.yml" ! -name ".env" -exec rm -rf {} \;
            echo "Cleanup complete."